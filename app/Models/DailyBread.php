<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Casts\Attribute;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class DailyBread extends Model
{
    use HasFactory;

    protected $fillable = ['title', 'poster_url', 'description'];

    protected static function boot(): void
    {
        parent::boot();
        self::created(function (DailyBread $dailyBread) {
            if (auth('admin')->check()) {
                $dailyBread->mediaHistory()->create([
                    'administrator_id' => auth("admin")->id()
            ]);
            }

        });

    }
    public function delete(): ?bool
    {
        $this->mediaHistory()->delete();
        return parent::delete(); // TODO: Change the autogenerated stub
    }

    /*------------ relationship-----------------*/

    public function mediaHistory(): \Illuminate\Database\Eloquent\Relations\MorphOne
    {
        return $this->morphOne(MediaHistory::class, "media");
    }

    public function posterUrl(): Attribute
    {
        return Attribute::make(
            get: fn() => asset("storage/" . $this->attributes['poster_url']),
            set: fn($value) => $value,
        );
    }

    public function comments(): \Illuminate\Database\Eloquent\Relations\MorphMany
    {
        return $this->morphMany(Comment::class, "commentable");
    }

    public function likes(): \Illuminate\Database\Eloquent\Relations\MorphMany
    {
        return $this->morphMany(Like::class, "likeable");
    }

    /*----------boot---------------*/

    public function userLikes(): \Illuminate\Database\Eloquent\Relations\MorphMany
    {
        return $this->morphMany(Like::class, "likeable");
    }

    protected function poster_url(): Attribute
    {
        return Attribute::make(
            get: fn($value, array $attributes) => asset('storage/' . $value),
            set: fn($value) => $value,
        );
    }
}
